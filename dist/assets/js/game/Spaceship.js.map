{"version":3,"sources":["game/Spaceship.js","../ts/game/Spaceship.ts"],"names":["System","register","exports_1","context_1","id","SpaceShip","execute","constructor","this","angle","counter","shiphalf","canvas","document","createElement","context","getContext","state","players","loadSpaceship","move","command","console","info","playerId","keyPressed","player","draw","update","fire","setPixelRatio"],"mappings":"aAAAA,OAAOC,SAAS,IAAI,SAAUC,EAAWC,GACrCA,GAAAA,EAAAC,GAGA,MAAO,CAFHC,QAAJ,GAIIC,QAAS,WC+FZJ,EASH,UA9GF,MAeCK,cACCC,KAAKC,MAAQ,EACbD,KAAKE,QAAU,EACfF,KAAKG,SAAW,EAChBH,KAAKI,OAA4BC,SAASC,cAAc,UACxDN,KAAKO,QAAoCP,KAAKI,OAAOI,WAAW,MAuBhER,KAAKS,MAAQ,CACZC,QAAS,IAIXC,iBAgBAC,KAAMC,GACLC,QAAQC,KAAK,UAAUF,EAAQG,yBAAyBH,EAAQI,cAEhE,MAeMA,EAAaJ,EAAQI,WACrBC,EAASlB,KAAKS,MAAMC,QAAQG,EAAQG,UAG1CF,QAAQC,KAAME,EAAYC,GAe3BC,QAWAC,UA+BAC,QAKAC","file":"Spaceship.js","sourcesContent":["System.register([], function (exports_1, context_1) {\n    \"use strict\";\n    var SpaceShip;\n    var __moduleName = context_1 && context_1.id;\n    return {\n        setters: [],\n        execute: function () {\n            SpaceShip = class SpaceShip {\n                constructor() {\n                    this.angle = 0;\n                    this.counter = 0;\n                    this.shiphalf = 0;\n                    this.canvas = document.createElement('canvas');\n                    this.context = this.canvas.getContext('2d');\n                    this.state = {\n                        players: []\n                    };\n                }\n                loadSpaceship() {\n                }\n                ;\n                move(command) {\n                    console.info(`Moving ${command.playerId} with command ${command.keyPressed}`);\n                    const acceptedMoves = {\n                        ArrowUp(player) {\n                            console.info('Moving player Up');\n                        },\n                        ArrowDown(player) {\n                            console.info('Moving player ArrowDown');\n                        },\n                        ArrowLeft(player) {\n                            console.info('Moving player Left');\n                        },\n                        ArrowRight(player) {\n                            console.info('Moving player Right');\n                        }\n                    };\n                    const keyPressed = command.keyPressed;\n                    const player = this.state.players[command.playerId];\n                    console.info(keyPressed, player);\n                }\n                draw() {\n                }\n                update() {\n                }\n                ;\n                fire() {\n                }\n                setPixelRatio() {\n                }\n            };\n            exports_1(\"default\", SpaceShip);\n        }\n    };\n});\n","export default class SpaceShip{\n\tprivate pos:any;\n\tprivate angle:number;\n\tprivate vel:any;\n\tprivate targetVel:any;  \n\tprivate temp:any;\n\tprivate main:any;\n\tprivate counter:number;\n\tprivate shiphalf:any;\n\tprivate half:any;\n\tprivate canvas:HTMLCanvasElement;\n\tprivate context:CanvasRenderingContext2D;\n\tprivate bullets:any;\n\tprivate state:any;\n\n\tconstructor(){\n\t\tthis.angle = 0;\n\t\tthis.counter = 0;\n\t\tthis.shiphalf = 0;\n\t\tthis.canvas = <HTMLCanvasElement>document.createElement('canvas');\n\t\tthis.context = <CanvasRenderingContext2D>this.canvas.getContext('2d');\n\t\t/* this.pos = new Vector2(0,0);\n\t\tthis.angle = 0;\n\t\tthis.vel = new Vector2(0,0);\n\t\tthis.targetVel = new Vector2(0,0);\n\t\tthis.temp = new Vector2(0,0);\n\t\tthis.main;\n\t\tthis.bullets = [];\n\t\tthis.counter = 0;\n\t\tthis.canvas.width = 40;\n\t\tthis.canvas.height = 40;\n\t\tthis.canvas.id=\"spaceship\"; */\n\n\t\t/* this.shiphalf = {\n\t\t\twidth: canvas.width / 2,\n\t\t\theight: canvas.height / 2\n\t\t};\n\n\t\tthis.half = {\n\t\t\twidth: (document.documentElement.clientWidth/2) - shiphalf.width,\n\t\t\theight: (document.documentElement.clientHeight/2) - shiphalf.height\n\t\t}; */\n\n\t\tthis.state = {\n\t\t\tplayers: []\n\t\t}\n\t}\n\t\n\tloadSpaceship(){\n\t\t/* var t = this;\n\t\tvar imageObj = new Image();\n        \timageObj.onload = function() \n        \t{\n          \t\tcontext.drawImage(this, 0, 0, imageObj.width, imageObj.height, 0, 0, 40, 30);\n\n          \t\t//with(t.pos)\n\t\t        // {\n\t\t        //     x =  0;\n\t\t        //     y =  (document.documentElement.clientHeight/2) - 20;\n\t\t        // }\n          \t}\n          \timageObj.src = 'assets/img/gameui/spaceship.png'; */\n\t};\n\n\tmove( command:any ){\n\t\tconsole.info(`Moving ${command.playerId} with command ${command.keyPressed}`);\n\n\t\tconst acceptedMoves = {\n\t\t\tArrowUp(player){\n\t\t\t\tconsole.info('Moving player Up');\n\t\t\t},\n\t\t\tArrowDown(player){\n\t\t\t\tconsole.info('Moving player ArrowDown');\n\t\t\t},\n\t\t\tArrowLeft(player){\n\t\t\t\tconsole.info('Moving player Left');\n\t\t\t},\n\t\t\tArrowRight(player){\n\t\t\t\tconsole.info('Moving player Right');\n\t\t\t}\n\t\t};\n\n\t\tconst keyPressed = command.keyPressed;\n\t\tconst player = this.state.players[command.playerId];\n\n\n\t\tconsole.info( keyPressed, player );\n\n\n\t\t/* canvas.setAttribute('class', 'actived');\n\n\t\tif(canvas.getAttribute('data-status') == 'actived')\n\t\t{\n\t\t\t//var styleStr = \"translate3d(\"+(half.width)+\"px, \"+ (half.height)+\"px, 0px) rotate(\"+ this.angle +\"deg)\"; \n\t\t\tvar styleStr = \"translate3d(\"+(130)+\"px, \"+ (pos.y)+\"px, 0px) rotate(\"+ this.angle +\"deg)\";\n\n\t\t\tcanvas.style.webkitTransform = canvas.style.MozTransform = canvas.style.OTransform = canvas.style.transform = styleStr; \n\t\t} */\n\t}\n\n\t\n\tdraw(){\n\t\t/* this.bullets.forEach(function(bullet){\n\t\t\tbullet.update();\n\t\t\tbullet.draw();\n\t\t});\n\n\t\tthis.bullets = this.bullets.filter(function(bullet) {\n\t\t\treturn bullet.active;\n\t\t}); */\n\t}\n\n\tupdate() {\n\t\t/* //speed limit\n\t\tvar maxSpeed = 6;\n\t\tif(targetVel.isMagGreaterThan(maxSpeed))\n\t\t{\n\t\t\ttargetVel.normalise(); \n\t\t\ttargetVel.multiplyEq(maxSpeed); \n\t\t\t\n\t\t}\n\t\tif(!targetVel.equals(vel))\n\t\t{\n\t\t\t\n\t\t\ttemp.copyFrom(targetVel); \n\t\t\ttemp.minusEq(vel); \n\n\t\t\tif(temp.isMagGreaterThan(0.0001))  temp.multiplyEq(1);//0.3 \n\t\t\t\n\t\t\tvel.plusEq(temp); \n\t\t\t\n\t\t} \n\t\tpos.plusEq(vel);\n\t\t\n\t\tif(vel.isMagGreaterThan(0)) this.angle = 0;//this.angle = vel.angle();\n\n\t\tthis.move(pos.x, pos.y);\n\t\t \n\t\t//if(thrustSize>0) thrustSize--; \n\t\t//thrustSize = vel.magnitude();  */\n\t};\n\n\n\tfire(){\n\t\t/* createjs.Sound.play(\"shot\");\n\t\tthis.bullets.push(new Bullet(this.main, 155, this.pos.y + 29)); */\n\t}\n\n\tsetPixelRatio(){\n\t\t/* var devicePixelRatio = window.devicePixelRatio || 1;\n\t    var backingStoreRatio = context.webkitBackingStorePixelRatio ||\n\t                        context.mozBackingStorePixelRatio ||\n\t                        context.msBackingStorePixelRatio ||\n\t                        context.oBackingStorePixelRatio ||\n\t                        context.backingStorePixelRatio || 1;\n\n\t    if(devicePixelRatio === 1) devicePixelRatio = 1;\n\n\t    var ratio = devicePixelRatio / backingStoreRatio;\n\n\n\t    if (devicePixelRatio !== backingStoreRatio) \n\t    {\n\t        var oldWidth = canvas.width;\n\t        var oldHeight = canvas.height;\n\n\t        canvas.width = oldWidth * ratio;\n\t        canvas.height = oldHeight * ratio;\n\n\t        canvas.style.width = oldWidth + 'px';\n\t        canvas.style.height = oldHeight + 'px';\n\n\t        context.scale(ratio, ratio);\n\t    } */\n\t}\n}"]}